public class Progression {
    
	class ChordNode{
		String rootNote;
		ArrayList<String> chord;
		ArrayList<Integer> paths; // edge indices
		ArrayList<Integer> reverse; // reverse indices(undirected)
		ArrayList<ArrayList<String>> substitutions;
    	
		public ChordNode(ArrayList<String> chord, int...adjacency) {
			super();
			this.rootNote = chord.get(0);
    		this.chord = chord;
    		this.paths = new ArrayList<Integer>();
    		this.substitutions = new ArrayList<ArrayList<String>>();
    		for(int i : adjacency) {
    			paths.add(i);
    		}
    	}
    }
	
	String key;
	ArrayList<ChordNode> prog;
	
	public Progression(String key, String type){
		this.key = key;
		this.prog = new ArrayList<ChordNode>();
		
		if(type.equalsIgnoreCase("major")) buildMajor();
		
		else {
			buildMinor();
		}
		
		
	}
	public void buildMajor() {
		String[] m = new String[7];
		
		int i = 0;
		
		for(String s : Scale.major(key)) {
			m[i++] = s;
		}
		
		prog.add(new ChordNode(Chord.major(m[0]), 3,4));
		prog.add(new ChordNode(Chord.minor(m[1]), 0,3,4));
		prog.add(new ChordNode(Chord.minor(m[2]), 0,3,5));
		prog.add(new ChordNode(Chord.major(m[3]), 1,4));
		prog.add(new ChordNode(Chord.major(m[4]), 0,2,5));
		prog.add(new ChordNode(Chord.minor(m[5]), 1,3));
		prog.add(new ChordNode(Chord.seventh(m[6]), 2));
		prog.add(new ChordNode(Chord.major(m[1]), 4));
		prog.add(new ChordNode(Chord.major(m[2]), 5));
		prog.add(new ChordNode(Chord.minor(m[4]), 0));
		prog.add(new ChordNode(Chord.major(m[5]), 1));
		prog.add(new ChordNode(Chord.major(Note.toFlat(m[5])), 12));
		prog.add(new ChordNode(Chord.major(Note.toFlat(m[6])), 0));
		prog.add(new ChordNode(Chord.dim7(Note.toSharp(m[0])), 1));
		prog.add(new ChordNode(Chord.dim7(Note.toSharp(m[1])), 2));
		prog.add(new ChordNode(Chord.dim(Note.toSharp(m[4])), 5));
	    prog.add(new ChordNode(Chord.m7b5(m[2]), 3, 10));
		prog.add(new ChordNode(Chord.m7b5(m[6]), 8));
		prog.add(new ChordNode(Chord.m7b5(Note.toSharp(m[3])), 12, 19));
		ArrayList<String> IRoot5 = Chord.major(m[0]);
		Collections.rotate(IRoot5, 1);
		
		prog.add(new ChordNode(IRoot5, 4));
		ArrayList<String> IdimRootb3 = Chord.dim(m[0]);
		Collections.rotate(IdimRootb3, 2);
		prog.add(new ChordNode(IdimRootb3, 1));
		ArrayList<String> VIm7b5Rootb3 = Chord.m7b5(m[4]);
		Collections.rotate(VIm7b5Rootb3, 2);
		
		prog.add(new ChordNode(VIm7b5Rootb3, 7));
		ArrayList<String> VRoot2 = Chord.major(m[4]);
		VRoot2.add(0, Scale.major(m[0]).get(1));
		prog.add(new ChordNode(VRoot2, 7));
		ArrayList<String> IRoot3 = Chord.major(m[0]);
		Collections.rotate(IRoot3, 2);
		prog.add(new ChordNode(IRoot3, 3, 1));
		prog.add(new ChordNode(Chord.min7(m[3]), 0));
		prog.add(new ChordNode(Chord.seventh(Note.toFlat(m[1])), 0));
		//prog.add(new ChordNode(Chord));
	    
	}
	public void buildMinor() {
        String[] m = new String[7];
		
		int i = 0;
		
		for(String s : Scale.minor(key)) {
			m[i++] = s;
		}
		prog.add(new ChordNode(Chord.minor(m[0]), 1,2));
		prog.add(new ChordNode(Chord.minor(m[4]), 0,4,5,9,10));
		prog.add(new ChordNode(Chord.major(m[3]), 0,1,6,7));
		prog.add(new ChordNode(Chord.major(Note.toFlat(m[1])), 1,6,7));
		prog.add(new ChordNode(Chord.minor(m[2]), 0,2,3,9,10));
		prog.add(new ChordNode(Chord.minor(m[0]),  0,2,3,9,10));
		prog.add(new ChordNode(Chord.dim(m[1]), 0,1,4,5));
		prog.add(new ChordNode(Chord.minor(m[6]), 0,4,5,1));
		prog.add(new ChordNode(Chord.minor(m[4]), 0,4,5,9,10));
		prog.add(new ChordNode(Chord.major(m[5]), 0,2,3,6,7));
		prog.add(new ChordNode(Chord.minor(m[3]), 0,2,3,6,7));
		
		
	}
	
}
